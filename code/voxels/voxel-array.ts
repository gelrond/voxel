export abstract class VoxelArray<_TType> {

    // ****************************************************************************************************************
    // elements - the elements
    // ****************************************************************************************************************
    protected readonly elements: _TType[] = [];

    // ****************************************************************************************************************
    // constructor
    // ****************************************************************************************************************
    constructor(protected size: number) { }

    // ****************************************************************************************************************
    // function:    createArray
    // ****************************************************************************************************************
    // parameters:  n/a
    // ****************************************************************************************************************
    // returns:     n/a
    // ****************************************************************************************************************
    protected createArray(): void {

        if (this.elements.length === 0) {

            this.elements.length = this.size;
        }
    }

    // ****************************************************************************************************************
    // function:    createElement
    // ****************************************************************************************************************
    // parameters:  n/a
    // ****************************************************************************************************************
    // returns:     the element
    // ****************************************************************************************************************
    protected abstract createElement(): _TType;

    // ****************************************************************************************************************
    // function:    fill
    // ****************************************************************************************************************
    // parameters:  value - the value
    // ****************************************************************************************************************
    // returns:     whether changed
    // ****************************************************************************************************************
    public fill(value: _TType): boolean {

        this.createArray();

        this.elements.fill(value, 0, this.size - 1);

        return true;
    }

    // ****************************************************************************************************************
    // function:    get
    // ****************************************************************************************************************
    // parameters:  index - the index
    // ****************************************************************************************************************
    //              createElement - whether to create the element
    // ****************************************************************************************************************
    // returns:     the value or null
    // ****************************************************************************************************************
    public get(index: number, createElement: boolean = true): _TType | null {

        if (index >= 0 && index < this.size) {

            if (createElement) {

                this.createArray();

                if (this.elements[index] === undefined) {

                    this.elements[index] = this.createElement();
                }
            }
            if (this.elements.length) {

                return this.elements[index];
            }
        }
        return null;
    }

    // ****************************************************************************************************************
    // function:    set
    // ****************************************************************************************************************
    // parameters:  index - the index
    // ****************************************************************************************************************
    //              value - the value
    // ****************************************************************************************************************
    // returns:     whether changed
    // ****************************************************************************************************************
    public set(index: number, value: _TType): boolean {

        if (index >= 0 && index < this.size) {

            this.createArray();

            if (this.elements[index] !== value) {

                this.elements[index] = value;

                return true;
            }
        }
        return false;
    }
}
