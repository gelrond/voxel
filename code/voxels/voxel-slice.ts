// ********************************************************************************************************************
import { GeometryBuilder } from "../geometry/geometry-builder";
// ********************************************************************************************************************
import { Bounds3 } from "../types/bounds3";
// ********************************************************************************************************************
import { Vector3 } from "../types/vector3";
// ********************************************************************************************************************
import { VoxelArray } from "./voxel-array";
// ********************************************************************************************************************
import { VoxelQuadRow } from "./voxel-row";
// ********************************************************************************************************************
export class VoxelSlice extends VoxelArray<VoxelQuadRow> {

    // ****************************************************************************************************************
    // constructor
    // ****************************************************************************************************************
    constructor(size: number) { super(size); }

    // ****************************************************************************************************************
    // function:    createElement
    // ****************************************************************************************************************
    // parameters:  n/a
    // ****************************************************************************************************************
    // returns:     the element
    // ****************************************************************************************************************
    protected override createElement(): VoxelQuadRow { return new VoxelQuadRow(this.size); }

    // ****************************************************************************************************************
    // function:    createGeometry
    // ****************************************************************************************************************
    // parameters:  builder - the builder
    // ****************************************************************************************************************
    //              bounds - the bounds
    // ****************************************************************************************************************
    // returns:     n/a
    // ****************************************************************************************************************
    public createGeometry(builder: GeometryBuilder, bounds: Bounds3): void {

        if (this.getVoxels()) {

            builder.addCubeFromBounds(bounds);

        } else if (this.elements.length) {

            for (var row = 0; row < this.size; row++) {

                if (this.elements[row]) {

                    const min = new Vector3(bounds.min.x, bounds.min.y + row - 0.5, bounds.min.z);

                    const max = new Vector3(bounds.max.x, bounds.min.y + row + 0.5, bounds.max.z);

                    this.elements[row].createGeometry(builder, new Bounds3(min, max));
                }
            }
        }
    }

    // ****************************************************************************************************************
    // function:    getVoxel
    // ****************************************************************************************************************
    // parameters:  row - the row
    // ****************************************************************************************************************
    //              index - the index
    // ****************************************************************************************************************
    // returns:     the voxel
    // ****************************************************************************************************************
    public getVoxel(row: number, index: number): boolean {

        return this.get(row, true)?.getVoxel(index) ?? false;
    }

    // ****************************************************************************************************************
    // function:    getVoxels
    // ****************************************************************************************************************
    // parameters:  n/a
    // ****************************************************************************************************************
    // returns:     the voxels
    // ****************************************************************************************************************
    public getVoxels(): boolean {

        return this.elements.length > 0 && this.elements.every(el => el.getVoxels());
    }

    // ****************************************************************************************************************
    // function:    setVoxel
    // ****************************************************************************************************************
    // parameters:  row - the row
    // ****************************************************************************************************************
    //              index - the index
    // ****************************************************************************************************************
    //              voxel - the voxel
    // ****************************************************************************************************************
    // returns:     whether changed
    // ****************************************************************************************************************
    public setVoxel(row: number, index: number, voxel: boolean): boolean {

        return this.get(row, true)?.setVoxel(index, voxel) ?? false;
    }

    // ****************************************************************************************************************
    // function:    setVoxels
    // ****************************************************************************************************************
    // parameters:  voxel - the voxel
    // ****************************************************************************************************************
    // returns:     whether changed
    // ****************************************************************************************************************
    public setVoxels(voxel: boolean): boolean {

        this.createArray();

        for (var row = 0; row < this.size; row++) {

            this.get(row)?.setVoxels(voxel);
        }
        return true;
    }
}
