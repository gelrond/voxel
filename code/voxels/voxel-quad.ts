// ********************************************************************************************************************
import { Mesh, MeshBasicMaterial, MeshStandardMaterial, Scene } from 'three/src/Three';
// ********************************************************************************************************************
import { GeometryBuilder } from '../geometry/geometry-builder';
// ********************************************************************************************************************
import { Bounds3 } from '../types/bounds3';
// ********************************************************************************************************************
import { Vector3 } from '../types/vector3';
// ********************************************************************************************************************
import { VoxelArray } from './voxel-array';
// ********************************************************************************************************************
import { VoxelSlice } from './voxel-slice';
// ********************************************************************************************************************
export class VoxelQuad extends VoxelArray<VoxelSlice> {

    // ****************************************************************************************************************
    // bounds - the bounds
    // ****************************************************************************************************************
    private bounds: Bounds3;

    // ****************************************************************************************************************
    // dirty - whether dirty
    // ****************************************************************************************************************
    private dirty: boolean = false;

    // ****************************************************************************************************************
    // mesh - the mesh
    // ****************************************************************************************************************
    private mesh: Mesh | null = null;

    // ****************************************************************************************************************
    // constructor
    // ****************************************************************************************************************
    constructor(private readonly scene: Scene, public readonly location: Vector3, min: Vector3, max: Vector3) { super(max.y - min.y); this.bounds = new Bounds3(min, max); }

    // ****************************************************************************************************************
    // function:    createElement
    // ****************************************************************************************************************
    // parameters:  n/a
    // ****************************************************************************************************************
    // returns:     the element
    // ****************************************************************************************************************
    protected createElement(): VoxelSlice { return new VoxelSlice(this.size); }

    // ****************************************************************************************************************
    // function:    createGeometry
    // ****************************************************************************************************************
    // parameters:  builder - the builder
    // ****************************************************************************************************************
    // returns:     n/a
    // ****************************************************************************************************************
    public createGeometry(builder: GeometryBuilder): void {

        if (this.getVoxels()) {

            builder.addCubeFromBounds(this.bounds);

        } else if (this.elements.length) {

            for (var slice = 0; slice < this.size; slice++) {

                if (this.elements[slice]) {

                    const min = new Vector3(this.bounds.min.x + slice - 0.5, this.bounds.min.y, this.bounds.min.z);

                    const max = new Vector3(this.bounds.min.x + slice + 0.5, this.bounds.max.y, this.bounds.max.z);

                    this.elements[slice].createGeometry(builder, new Bounds3(min, max));
                }
            }
        }
    }

    // ****************************************************************************************************************
    // function:    getVoxel
    // ****************************************************************************************************************
    // parameters:  slice - the slice
    // ****************************************************************************************************************
    //              row - the row
    // ****************************************************************************************************************
    //              index - the index
    // ****************************************************************************************************************
    // returns:     the voxel
    // ****************************************************************************************************************
    public getVoxel(slice: number, row: number, index: number): boolean {

        return this.get(slice, true)?.getVoxel(row, index) ?? false;
    }

    // ****************************************************************************************************************
    // function:    getVoxels
    // ****************************************************************************************************************
    // parameters:  n/a
    // ****************************************************************************************************************
    // returns:     the voxels
    // ****************************************************************************************************************
    public getVoxels(): boolean {

        return this.elements.length > 0 && this.elements.every(el => el.getVoxels());
    }

    // ****************************************************************************************************************
    // function:    setVoxel
    // ****************************************************************************************************************
    // parameters:  slice - the slice
    // ****************************************************************************************************************
    //              row - the row
    // ****************************************************************************************************************
    //              index - the index
    // ****************************************************************************************************************
    //              voxel - the voxel
    // ****************************************************************************************************************
    // returns:     whether changed
    // ****************************************************************************************************************
    public setVoxel(slice: number, row: number, index: number, voxel: boolean): boolean {

        return this.get(slice, true)?.setVoxel(row, index, voxel) ?? false;
    }

    // ****************************************************************************************************************
    // function:    setVoxelAt
    // ****************************************************************************************************************
    // parameters:  x - the x
    // ****************************************************************************************************************
    //              y - the y
    // ****************************************************************************************************************
    //              z - the z
    // ****************************************************************************************************************
    // returns:     n/a
    // ****************************************************************************************************************
    public setVoxelAt(x: number, y: number, z: number, voxel: boolean): void {

        const slice = x - this.bounds.min.x;

        if (slice < 0 || slice >= this.size) return;

        const row = y - this.bounds.min.y;

        if (row < 0 || row >= this.size) return;

        const index = z - this.bounds.min.z;

        if (index < 0 || index >= this.size) return;

        if (this.setVoxel(slice, row, index, voxel)) {

            this.dirty = true;
        }
    }

    // ****************************************************************************************************************
    // function:    setVoxels
    // ****************************************************************************************************************
    // parameters:  voxel - the voxel
    // ****************************************************************************************************************
    // returns:     whether changed
    // ****************************************************************************************************************
    public setVoxels(voxel: boolean): boolean {

        this.createArray();

        for (var slice = 0; slice < this.size; slice++) {

            this.get(slice)?.setVoxels(voxel);
        }
        this.dirty = true;

        return true;
    }

    // ****************************************************************************************************************
    // function:    update
    // ****************************************************************************************************************
    // parameters:  n/a
    // ****************************************************************************************************************
    // returns:     n/a
    // ****************************************************************************************************************
    public update(): void {

        if (this.dirty && this.elements.length) {

            this.dirty = false;

            if (this.mesh) this.scene.remove(this.mesh);

            const builder = new GeometryBuilder();

            this.createGeometry(builder);

            const geometry = builder.generate();

            const material = new MeshStandardMaterial({ color: 'f0fff0', roughness: 1.0 });

            geometry.computeVertexNormals();

            this.mesh = new Mesh(geometry, material);

            this.scene.add(this.mesh);
        }
    }
}
