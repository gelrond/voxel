// ********************************************************************************************************************
import { Colour } from "../types/colour";
// ********************************************************************************************************************
import { List } from "../types/list";
// ********************************************************************************************************************
import { Vector2 } from "../types/vector2";
// ********************************************************************************************************************
import { Vector3 } from "../types/vector3";
// ********************************************************************************************************************
import { GeometryData } from "./geometry-data";
// ********************************************************************************************************************
export class GeometryDataList extends List<GeometryData> {

    // ****************************************************************************************************************
    // constructor
    // ****************************************************************************************************************
    constructor(data: GeometryData[] = []) { super(data); }

    // ****************************************************************************************************************
    // function:    getColours
    // ****************************************************************************************************************
    // parameters:  n/a
    // ****************************************************************************************************************
    // returns:     the colours
    // ****************************************************************************************************************
    public getColours(): Colour[] {

        const colours = [];

        for (var i = 0; i < this.array.length; i++) {

            var element = this.array[i];

            if (element.colour) colours.push(element.colour);
        }
        return colours;
    }

    // ****************************************************************************************************************
    // function:    getColoursArray
    // ****************************************************************************************************************
    // parameters:  n/a
    // ****************************************************************************************************************
    // returns:     the colours array
    // ****************************************************************************************************************
    public getColoursArray(): Float32Array {

        const colours: number[] = [];

        const elements = this.getColours();

        for (var i = 0; i < elements.length; i++) {

            var element = elements[i];

            colours.push(...[element.r, element.g, element.b]);
        }
        return new Float32Array(colours);
    }

    // ****************************************************************************************************************
    // function:    getNormals
    // ****************************************************************************************************************
    // parameters:  n/a
    // ****************************************************************************************************************
    // returns:     the normals
    // ****************************************************************************************************************
    public getNormals(): Vector3[] {

        const normals = [];

        for (var i = 0; i < this.array.length; i++) {

            var element = this.array[i];

            if (element.normal) normals.push(element.normal);
        }
        return normals;
    }

    // ****************************************************************************************************************
    // function:    getNormalsArray
    // ****************************************************************************************************************
    // parameters:  n/a
    // ****************************************************************************************************************
    // returns:     the normals array
    // ****************************************************************************************************************
    public getNormalsArray(): Float32Array {

        const normals: number[] = [];

        const elements = this.getNormals();

        for (var i = 0; i < elements.length; i++) {

            var element = elements[i];

            normals.push(...[element.x, element.y, element.z]);
        }
        return new Float32Array(normals);
    }

    // ****************************************************************************************************************
    // function:    getPositions
    // ****************************************************************************************************************
    // parameters:  n/a
    // ****************************************************************************************************************
    // returns:     the positions
    // ****************************************************************************************************************
    public getPositions(): Vector3[] {

        const positions = [];

        for (var i = 0; i < this.array.length; i++) {

            var element = this.array[i];

            if (element.position) positions.push(element.position);
        }
        return positions;
    }

    // ****************************************************************************************************************
    // function:    getPositionsArray
    // ****************************************************************************************************************
    // parameters:  n/a
    // ****************************************************************************************************************
    // returns:     the positions array
    // ****************************************************************************************************************
    public getPositionsArray(): Float32Array {

        const positions: number[] = [];

        const elements = this.getPositions();

        for (var i = 0; i < elements.length; i++) {

            var element = elements[i];

            positions.push(...[element.x, element.y, element.z]);
        }
        return new Float32Array(positions);
    }

    // ****************************************************************************************************************
    // function:    getUvs
    // ****************************************************************************************************************
    // parameters:  n/a
    // ****************************************************************************************************************
    // returns:     the uvs
    // ****************************************************************************************************************
    public getUvs(): Vector2[] {

        const uvs = [];

        for (var i = 0; i < this.array.length; i++) {

            var element = this.array[i];

            if (element.uv) uvs.push(element.uv);
        }
        return uvs;
    }

    // ****************************************************************************************************************
    // function:    getUvsArray
    // ****************************************************************************************************************
    // parameters:  n/a
    // ****************************************************************************************************************
    // returns:     the uvs array
    // ****************************************************************************************************************
    public getUvsArray(): Float32Array {

        const uvs: number[] = [];

        const elements = this.getUvs();

        for (var i = 0; i < elements.length; i++) {

            var element = elements[i];

            uvs.push(...[element.x, element.y]);
        }
        return new Float32Array(uvs);
    }

    // ****************************************************************************************************************
    // function:    getUv2s
    // ****************************************************************************************************************
    // parameters:  n/a
    // ****************************************************************************************************************
    // returns:     the uv2s
    // ****************************************************************************************************************
    public getUv2s(): Vector2[] {

        const uvs = [];

        for (var i = 0; i < this.array.length; i++) {

            var element = this.array[i];

            if (element.uv2) uvs.push(element.uv2);
        }
        return uvs;
    }

    // ****************************************************************************************************************
    // function:    getUv2sArray
    // ****************************************************************************************************************
    // parameters:  n/a
    // ****************************************************************************************************************
    // returns:     the uv2s array
    // ****************************************************************************************************************
    public getUv2sArray(): Float32Array {

        const uvs: number[] = [];

        const elements = this.getUv2s();

        for (var i = 0; i < elements.length; i++) {

            var element = elements[i];

            uvs.push(...[element.x, element.y]);
        }
        return new Float32Array(uvs);
    }
}
