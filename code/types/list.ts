// ********************************************************************************************************************
import { IEquality } from "../shared/equality.interface";
// ********************************************************************************************************************
export class List<_TType extends IEquality<_TType>> {

    // ****************************************************************************************************************
    // array - the array
    // ****************************************************************************************************************
    public readonly array: _TType[] = [];

    // ****************************************************************************************************************
    // constructor
    // ****************************************************************************************************************
    constructor(array: _TType[] = []) { if (array) this.addMulti(array); }

    // ****************************************************************************************************************
    // function:    add
    // ****************************************************************************************************************
    // parameters:  value - the value
    // ****************************************************************************************************************
    //              duplicatesAllowed - whether duplicates are allowed
    // ****************************************************************************************************************
    // returns:     the index or -1 if not found
    // ****************************************************************************************************************
    public add(value: _TType, duplicatesAllowed: boolean = false): number {

        var index = this.indexOf(value);

        if (index === -1 || duplicatesAllowed) {

            index = this.array.push(value) - 1;
        }
        return index;
    }

    // ****************************************************************************************************************
    // function:    addMulti
    // ****************************************************************************************************************
    // parameters:  values - the values
    // ****************************************************************************************************************
    //              duplicatesAllowed - whether duplicates are allowed
    // ****************************************************************************************************************
    // returns:     the indices
    // ****************************************************************************************************************
    public addMulti(values: _TType[], duplicatesAllowed: boolean = false): number[] {

        const indices = [];

        if (values) {

            for (var i = 0; i < values.length; i++) {

                const index = this.add(values[i], duplicatesAllowed);

                indices.push(index);
            }
        }
        return indices;
    }

    // ****************************************************************************************************************
    // function:    contains
    // ****************************************************************************************************************
    // parameters:  value - the value
    // ****************************************************************************************************************
    // returns:     whether the value is contained in the list
    // ****************************************************************************************************************
    public contains(value: _TType): boolean {

        return this.indexOf(value) >= 0;
    }

    // ****************************************************************************************************************
    // function:    doesNotContain
    // ****************************************************************************************************************
    // parameters:  value - the value
    // ****************************************************************************************************************
    // returns:     whether the value is not contained in the list
    // ****************************************************************************************************************
    public doesNotContain(value: _TType): boolean {

        return !this.contains(value);
    }

    // ****************************************************************************************************************
    // function:    find
    // ****************************************************************************************************************
    // parameters:  predicate - the predicate
    // ****************************************************************************************************************
    // returns:     the value or null
    // ****************************************************************************************************************
    public find(predicate: (value: _TType, index: number, obj: _TType[]) => unknown): _TType | null {

        const result = this.array.find(predicate);

        return result ?? null;
    }

    // ****************************************************************************************************************
    // function:    indexOf
    // ****************************************************************************************************************
    // parameters:  value - the value
    // ****************************************************************************************************************
    // returns:     the index or -1 if not found
    // ****************************************************************************************************************
    public indexOf(value: _TType): number {

        if (value) {

            for (var i = 0; i < this.array.length; i++) {

                if (value.equals(this.array[i])) return i;
            }
        }
        return -1;
    }
}
