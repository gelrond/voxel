// ********************************************************************************************************************
import { round } from "../helpers/math.helper";
import { Bounds2 } from "./bounds2";
// ********************************************************************************************************************
export abstract class Array2<_TType> {

    // ****************************************************************************************************************
    // array - the array
    // ****************************************************************************************************************
    private readonly array: _TType[] = [];

    // ****************************************************************************************************************
    // offsets - the offsets
    // ****************************************************************************************************************
    private readonly offsets: number[] = [];

    // ****************************************************************************************************************
    // total - the total
    // ****************************************************************************************************************
    public readonly total: number = 0;

    // ****************************************************************************************************************
    // constructor
    // ****************************************************************************************************************
    constructor(public readonly sizeX: number, public readonly sizeY: number, createDefaults: boolean = false) {

        this.total = sizeX * sizeY; var index = 0;

        for (var i = 0; i < this.total; i++, index += sizeX) {

            if (createDefaults) this.array[i] = this.createDefault();

            if (i < sizeY) this.offsets[i] = index;
        }
    }

    // ****************************************************************************************************************
    // function:    copy
    // ****************************************************************************************************************
    // parameters:  source - the source
    // ****************************************************************************************************************
    //              bounds - the bounds to copy or null for all
    // ****************************************************************************************************************
    // returns:     n/a
    // ****************************************************************************************************************
    public copy(source: Array2<_TType>, bounds: Bounds2 | null = null): void {

        const x1 = bounds?.min.x ?? 0;

        const x2 = bounds?.max.x ?? this.sizeX - 1;

        const y1 = bounds?.min.y ?? 0;

        const y2 = bounds?.max.y ?? this.sizeY - 1;

        for (var x = x1; x <= x2; x++) {

            for (var y = y1; y <= y2; y++) {

                const value = source.get(x, y);

                this.set(x, y, value);
            }
        }
    }

    // ****************************************************************************************************************
    // function:    createDefault
    // ****************************************************************************************************************
    // parameters:  n/a
    // ****************************************************************************************************************
    // returns:     the default
    // ****************************************************************************************************************
    protected abstract createDefault(): _TType;

    // ****************************************************************************************************************
    // function:    get
    // ****************************************************************************************************************
    // parameters:  x - the x
    // ****************************************************************************************************************
    //              y - the y
    // ****************************************************************************************************************
    // returns:     the value
    // ****************************************************************************************************************
    public get(x: number, y: number): _TType {

        const offset = this.getOffset(x, y);

        if (offset >= 0) {

            return this.array[offset];
        } else {
            return this.array[0];
        }
    }

    // ****************************************************************************************************************
    // function:    getOffset
    // ****************************************************************************************************************
    // parameters:  x - the x
    // ****************************************************************************************************************
    //              y - the y
    // ****************************************************************************************************************
    // returns:     the offset
    // ****************************************************************************************************************
    private getOffset(x: number, y: number): number {

        x = round(x);

        y = round(y);

        if (this.isValid(x, y)) {

            return this.offsets[y] + x;
        }
        return -1;
    }

    // ****************************************************************************************************************
    // function:    isValid
    // ****************************************************************************************************************
    // parameters:  x - the x
    // ****************************************************************************************************************
    //              y - the y
    // ****************************************************************************************************************
    // returns:     whether this is a valid index
    // ****************************************************************************************************************
    public isValid(x: number, y: number): boolean {

        if (x < 0 || x >= this.sizeX) return false;

        if (y < 0 || y >= this.sizeY) return false;

        return true;
    }

    // ****************************************************************************************************************
    // function:    set
    // ****************************************************************************************************************
    // parameters:  x - the x
    // ****************************************************************************************************************
    //              y - the y
    // ****************************************************************************************************************
    //              value - the value
    // ****************************************************************************************************************
    // returns:     n/a
    // ****************************************************************************************************************
    public set(x: number, y: number, value: _TType): void {

        const offset = this.getOffset(x, y);

        if (offset >= 0) this.array[offset] = value;
    }
}
