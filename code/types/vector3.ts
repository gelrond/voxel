// ********************************************************************************************************************
import * as THREE from 'three';
// ********************************************************************************************************************
import { lerp, max, min } from "../helpers/math.helper";
// ********************************************************************************************************************
import { IEquality } from '../shared/equality.interface';
// ********************************************************************************************************************
export class Vector3 extends THREE.Vector3 implements IEquality<Vector3> {

    // ****************************************************************************************************************
    // constructor
    // ****************************************************************************************************************
    constructor(x: number = 0, y: number = 0, z: number = 0) { super(x, y, z); }

    // ****************************************************************************************************************
    // function:    max
    // ****************************************************************************************************************
    // parameters:  vector1 - the vector 1
    // ****************************************************************************************************************
    //              vector2 - the vector 2
    // ****************************************************************************************************************
    // returns:     the max
    // ****************************************************************************************************************
    public static max(vector1: Vector3, vector2: Vector3): Vector3 {

        if (vector1 && vector2) {

            const x = max(vector1.x, vector2.x);

            const y = max(vector1.y, vector2.y);

            const z = max(vector1.z, vector2.z);

            if (x === vector1.x && y === vector1.y && z === vector1.z) return vector1;

            if (x === vector2.x && y === vector2.y && z === vector2.z) return vector2;

            return new Vector3(x, y, z);
        }
        return vector1 ?? vector2 ?? null;
    }

    // ****************************************************************************************************************
    // function:    mid
    // ****************************************************************************************************************
    // parameters:  vector1 - the vector 1
    // ****************************************************************************************************************
    //              vector2 - the vector 2
    // ****************************************************************************************************************
    // returns:     the mid
    // ****************************************************************************************************************
    public static mid(vector1: Vector3, vector2: Vector3): Vector3 {

        if (vector1 && vector2) {

            const x = lerp(vector1.x, vector2.x);

            const y = lerp(vector1.y, vector2.y);

            const z = lerp(vector1.z, vector2.z);

            return new Vector3(x, y, z);
        }
        return vector1 ?? vector2 ?? null;
    }

    // ****************************************************************************************************************
    // function:    min
    // ****************************************************************************************************************
    // parameters:  vector1 - the vector 1
    // ****************************************************************************************************************
    //              vector2 - the vector 2
    // ****************************************************************************************************************
    // returns:     the min
    // ****************************************************************************************************************
    public static min(vector1: Vector3, vector2: Vector3): Vector3 {

        if (vector1 && vector2) {

            const x = min(vector1.x, vector2.x);

            const y = min(vector1.y, vector2.y);

            const z = min(vector1.z, vector2.z);

            if (x === vector1.x && y === vector1.y && z === vector1.z) return vector1;

            if (x === vector2.x && y === vector2.y && z === vector2.z) return vector2;

            return new Vector3(x, y, z);
        }
        return vector1 ?? vector2 ?? null;
    }
}
